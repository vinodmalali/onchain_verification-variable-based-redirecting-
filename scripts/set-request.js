function hexToBytes(hex) {
  for (var bytes = [], c = 0; c < hex.length; c += 2)
    bytes.push(parseInt(hex.substr(c, 2), 16))
  return bytes
}
 
function fromLittleEndian(bytes) {
  const n256 = BigInt(256)
  let result = BigInt(0)
  let base = BigInt(1)
  bytes.forEach((byte) => {
    result += base * BigInt(byte)
    base = base * n256
  })
  return result
}
 
async function main() {
  // The CredentialAtomicQuerySigValidator contract is used to verify any claim-related zk proof generated by user using the credentialAtomicQuerySig circuit.
  // https://0xpolygonid.github.io/tutorials/contracts/overview/#credentialatomicquerysigvalidator
  const circuitId = "credentialAtomicQuerySig"
 
  // CredentialAtomicQuerySigValidator Mumbai address
  const validatorAddress = "0xb1e86C4c687B85520eF4fd2a0d14e81970a15aFB"
 
  // Query language: https://0xpolygonid.github.io/tutorials/verifier/verification-library/zk-query-language/
  const schemaHash = "3c0e54d8f7eae5dbb7f011e42b3e56a3" // extracted from PID Platform
 
  const schemaEnd = fromLittleEndian(hexToBytes(schemaHash))
  const query = {
    schema: ethers.BigNumber.from(schemaEnd),
    slotIndex: 2, // slotIndex2 indicates the value stored as Attribute 1 inside the claim
    operator: 1,
    value: [1, ...new Array(63).fill(0).map((i) => 0)], // the value must be 1 = true
    circuitId,
  }
 
  // add the address of the contract just deployed
  ERC20VerifierAddress = "0x7838769e2571c6EFB7Ad73916deFC9DE457461d7"
 
  let erc20Verifier = await hre.ethers.getContractAt(
    "ERC20Verifier",
    ERC20VerifierAddress
  )
 
  const requestId = await erc20Verifier.TRANSFER_REQUEST_ID()
 
  try {
    await erc20Verifier.setZKPRequest(requestId, validatorAddress, query)
    console.log("Request set")
  } catch (e) {
    console.log("error: ", e)
  }
}
 
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })